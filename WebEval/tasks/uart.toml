[task]
name = "Print hexadecimal number to serial port"
template = "S_templates/uart.S"

description = '''
# Print hexadecimal number to serial port
Write a program that reads a number from `input_val`, converts it to
ASCII character array and prints those characters to the serial port.

The complete task description can also be found [here](https://cw.fel.cvut.cz/wiki/courses/b35apo/en/homeworks/bonus/start), Makefile and template files for your own testing can be found on [GitLab](https://gitlab.fel.cvut.cz/b35apo/stud-support/-/tree/master/seminaries/qtrvsim/print-hex-to-uart).
'''

[arguments]
run = "--dump-cycles --pipelined --cycle-limit 2500"

[[inputs]]
data_in = "Input number located at input_val."
data_out = "Input number printed as ASCII characters to UART."
description = "Print hex to uart."

[[testcases]]
name = "number 111"

[[testcases.starting_mem]]
input_val = [111]

[[testcases.reference_uart]]
uart = "0000006f\n"

[[testcases]]
name = "number 17111989"

[[testcases.starting_mem]]
input_val = [17111989]

[[testcases.reference_uart]]
uart = "01051bb5\n"

[[testcases]]
name = "scoring testcase"
private = true

[[testcases.starting_mem]]
input_val = [123456789]

[[testcases.reference_uart]]
uart = "075bcd15\n"

[score]
description = "Runtime of the program in cycles."
testcase = "scoring testcase"

# [make]
# Makefile="""ARCH=riscv64-unknown-elf

# SOURCES = submission.S
# TARGET_EXE = submission

# CC=$(ARCH)-gcc
# CXX=$(ARCH)-g++
# AS=$(ARCH)-as
# LD=$(ARCH)-ld
# OBJCOPY=$(ARCH)-objcopy

# ARCHFLAGS += -mabi=ilp32
# ARCHFLAGS += -march=rv32i
# ARCHFLAGS += -fno-lto

# CFLAGS  += -ggdb -Os -Wall
# CXXFLAGS+= -ggdb -Os -Wall
# AFLAGS  += -ggdb
# LDFLAGS += -ggdb
# LDFLAGS += -nostartfiles
# LDFLAGS += -nostdlib
# LDFLAGS += -static
# #LDFLAGS += -specs=/opt/musl/riscv64-linux-gnu/lib/musl-gcc.specs

# CFLAGS  += $(ARCHFLAGS)
# CXXFLAGS+= $(ARCHFLAGS)
# AFLAGS  += $(ARCHFLAGS)
# LDFLAGS += $(ARCHFLAGS)

# OBJECTS += $(filter %.o,$(SOURCES:%.S=%.o))
# OBJECTS += $(filter %.o,$(SOURCES:%.c=%.o))
# OBJECTS += $(filter %.o,$(SOURCES:%.cpp=%.o))

# all : default

# .PHONY : default clean dep all run_test

# %.o:%.S
# 	$(CC) -D__ASSEMBLY__ $(AFLAGS) -c $< -o $@

# %.o:%.c
# 	$(CC) $(CFLAGS) $(CPPFLAGS) -c $< -o $@

# %.o:%.cpp
# 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -c $<

# %.s:%.c
# 	$(CC) $(CFLAGS) $(CPPFLAGS) -S $< -o $@

# default : submission

# $(TARGET_EXE) : $(OBJECTS)
# 	$(CC) $(LDFLAGS) $^ -o $@

# dep: depend

# depend: $(SOURCES) $(glob *.h)
# 	echo '# autogenerated dependencies' > depend
# ifneq ($(filter %.S,$(SOURCES)),)
# 	$(CC)  -D__ASSEMBLY__ $(AFLAGS) -w -E -M $(filter %.S,$(SOURCES)) \
# 	  >> depend
# endif
# ifneq ($(filter %.c,$(SOURCES)),)
# 	$(CC) $(CFLAGS) $(CPPFLAGS) -w -E -M $(filter %.c,$(SOURCES)) \
# 	  >> depend
# endif
# ifneq ($(filter %.cpp,$(SOURCES)),)
# 	$(CXX) $(CXXFLAGS) $(CPPFLAGS) -w -E -M $(filter %.cpp,$(SOURCES)) \
# 	  >> depend
# endif

# clean:
# 	rm -f *.o *.a $(OBJECTS) $(TARGET_EXE) depend

# -include depend

# """
