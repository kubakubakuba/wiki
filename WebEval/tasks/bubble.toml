[task]
name = "Bubble Sort"
template = "S_templates/bubble.S"

description = '''
# Bubble Sort.
**Write a program that sorts an array using bubble sort algorithm.**

The size of the array will be located at the address `array_size`, the integer array (32-bit integer words) will start
at the address `array_start`.

The program should sort the array in ascending order.
Your program will be tested with different array sizes and different values in the array.

The complete task description can also be found [here](https://cw.fel.cvut.cz/wiki/courses/b35apo/en/homeworks/bonus/start), Makefile and template files for your own testing can be found on [GitLab](https://gitlab.fel.cvut.cz/b35apo/stud-support/-/tree/master/seminaries/qtrvsim/buble-sort).
'''

[arguments]
run = "--dump-cycles --cycle-limit 100000"

[[inputs]]
data_in = "Size of the array located at address array_size, the array start is located at the address array_start."
data_out = "Sorted array of length array_size"
description = "Cache optimized sorting."

[[testcases]]
name = "5 elements"

[[testcases.starting_mem]]
array_size = [5]
array_start = [1, 3, 4, 5, 2]

[[testcases.reference_mem]]
array_start = [1, 2, 3, 4, 5]

[[testcases]]
name = "10 elements"

[[testcases.starting_mem]]
array_size = [10]
array_start = [1, 3, 4, 5, 2, 7, 9, 8, 6, 10]

[[testcases.reference_mem]]
array_start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

[[testcases]]
name = "100 elements"

[[testcases.starting_mem]]
array_size = [100]
array_start = [1, 3, 4, 5, 2, 7, 9, 8, 6, 10, 11, 13, 14, 15, 12, 17, 19, 18, 16, 20, 21, 23, 24, 25, 22, 27, 29, 28, 26, 30, 31, 33, 34, 35, 32, 37, 39, 38, 36, 40, 41, 43, 44, 45, 42, 47, 49, 48, 46, 50, 51, 53, 54, 55, 52, 57, 59, 58, 56, 60, 61, 63, 64, 65, 62, 67, 69, 68, 66, 70, 71, 73, 74, 75, 72, 77, 79, 78, 76, 80, 81, 83, 84, 85, 82, 87, 89, 88, 86, 90, 91, 93, 94, 95, 92, 97, 99, 98, 96, 100]

[[testcases.reference_mem]]
array_start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]

[[testcases]]
name = "private 1"
private = true

[[testcases.starting_mem]]
array_size = [10]
array_start = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]

[[testcases.reference_mem]]
array_start = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

[[testcases]]
name = "private 2"
private = true

[[testcases.starting_mem]]
array_size = [7]
array_start = [47, 89, 48, 12, 45, 79, 34]

[[testcases.reference_mem]]
array_start = [12, 34, 45, 47, 48, 79, 89]

[[testcases]]
name = "scoring testcase"
private = true

[[testcases.starting_mem]]
array_size = [23]
array_start = [49789, 45633, 448, 1, 447, 9986, 1125, 44, 4, 8, 96, 2, 9, 7789, 44444, 55555, 66666, 99999, 77777, 6325, 1258, 12345, 54321]

[[testcases.reference_mem]]
array_start = [1, 2, 4, 8, 9, 44, 96, 447, 448, 1125, 1258, 6325, 7789, 9986, 12345, 44444, 45633, 49789, 54321, 55555, 66666, 77777, 99999]


[score]
description = "Runtime of the program in cycles."
testcase = "scoring testcase"
